generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Waitlist {
  id        Int      @id @default(autoincrement())
  email     String
  phone     String?
  createdAt DateTime @default(now())
}

model PartnerApplication {
  id          Int      @id @default(autoincrement())
  companyName String
  contactName String
  email       String
  phone       String?
  location    String?
  notes       String?
  createdAt   DateTime @default(now())
}

model ContentBlock {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Partner {
  id            Int                 @id @default(autoincrement())
  email         String              @unique
  name          String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  codes         ExtranetLoginCode[]
  sessions      ExtranetSession[]
  documents     PropertyDocument[]
  photos        PropertyPhoto[]
  profile       PropertyProfile?
  ratePlans     RatePlan[]
  roomInventory RoomInventory[]
  roomPrices    RoomPrice[]
  roomTypes     RoomType[]
}

model ExtranetLoginCode {
  id        Int       @id @default(autoincrement())
  partnerId Int
  codeHash  String
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  partner   Partner   @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@index([partnerId])
  @@index([expiresAt])
}

model ExtranetSession {
  id        Int       @id @default(autoincrement())
  partnerId Int
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?
  partner   Partner   @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@index([partnerId])
  @@index([expiresAt])
}

model PropertyProfile {
  id           Int      @id @default(autoincrement())
  partnerId    Int      @unique
  name         String
  addressLine  String?
  city         String?
  country      String?
  contactEmail String?
  phone        String?
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  partner      Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
}

model PropertyPhoto {
  id        Int      @id @default(autoincrement())
  partnerId Int
  key       String   @unique
  url       String
  alt       String?
  sortOrder Int      @default(0)
  isCover   Boolean  @default(false)
  width     Int?
  height    Int?
  createdAt DateTime @default(now())
  partner   Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@index([partnerId, sortOrder])
}

model PropertyDocument {
  id          Int            @id @default(autoincrement())
  partnerId   Int
  type        DocumentType
  key         String         @unique
  url         String
  fileName    String?
  contentType String?
  status      DocumentStatus @default(SUBMITTED)
  uploadedAt  DateTime       @default(now())
  verifiedAt  DateTime?
  expiresAt   DateTime?
  notes       String?
  partner     Partner        @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([partnerId, type])
  @@index([partnerId, status])
}

model RoomType {
  id          Int             @id @default(autoincrement())
  partnerId   Int
  name        String
  description String?
  maxGuests   Int             @default(2)
  occupancy   Int             @default(2)
  basePrice   Decimal         @db.Decimal(10, 2)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  rates       RatePlan[]
  inventory   RoomInventory[]
  prices      RoomPrice[]
  partner     Partner         @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([partnerId, name])
  @@index([partnerId])
}

model RatePlan {
  id          Int         @id @default(autoincrement())
  partnerId   Int
  roomTypeId  Int
  name        String
  exposeToUis Boolean     @default(true)
  uisPriority Int         @default(100)
  policy      String?
  priceDelta  Decimal?    @db.Decimal(10, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  partner     Partner     @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  roomType    RoomType    @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
  prices      RoomPrice[]

  @@unique([roomTypeId, name])
  @@index([partnerId])
  @@index([partnerId, uisPriority])
  @@index([partnerId, uisPriority], map: "RatePlan_partner_uisPriority_idx")
}

model RoomInventory {
  id         Int      @id @default(autoincrement())
  partnerId  Int
  roomTypeId Int
  date       DateTime
  roomsOpen  Int      @default(0)
  isClosed   Boolean  @default(false)
  minStay    Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  partner    Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  roomType   RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)

  @@unique([roomTypeId, date])
  @@index([partnerId, date])
}

model RoomPrice {
  id         Int       @id @default(autoincrement())
  partnerId  Int
  roomTypeId Int
  ratePlanId Int?
  date       DateTime
  price      Decimal   @db.Decimal(10, 2)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  partner    Partner   @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  ratePlan   RatePlan? @relation(fields: [ratePlanId], references: [id], onDelete: Cascade)
  roomType   RoomType  @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)

  @@unique([roomTypeId, ratePlanId, date])
  @@index([partnerId, date])
}

enum DocumentType {
  GOVT_ID
  BUSINESS_REG
  TAX_ID
  BANK_PROOF
  PROOF_OF_ADDRESS
  INSURANCE_LIABILITY
  PROPERTY_OWNERSHIP
  LOCAL_LICENSE
}

enum DocumentStatus {
  REQUIRED
  SUBMITTED
  APPROVED
  REJECTED
}

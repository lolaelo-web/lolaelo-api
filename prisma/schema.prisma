// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Waitlist {
  id        Int      @id @default(autoincrement())
  email     String
  phone     String?
  createdAt DateTime @default(now())
}

model PartnerApplication {
  id          Int      @id @default(autoincrement())
  companyName String
  contactName String
  email       String
  phone       String?
  location    String?
  notes       String?
  createdAt   DateTime @default(now())
}

model ContentBlock {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// === Extranet auth models (EXISTING) ===

model Partner {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  sessions  ExtranetSession[]
  codes     ExtranetLoginCode[]

  // 1:1 property profile
  profile   PropertyProfile?

  // Photos owned by this partner (NEW)
  photos    PropertyPhoto[]
}

model ExtranetLoginCode {
  id           Int       @id @default(autoincrement())
  partnerId    Int
  // Store a hash of the code for safety
  codeHash     String
  // Code expires after 10 minutes
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  usedAt       DateTime?

  partner      Partner   @relation(fields: [partnerId], references: [id])

  @@index([partnerId])
  @@index([expiresAt])
}

model ExtranetSession {
  id            Int       @id @default(autoincrement())
  partnerId     Int
  // Random token returned to client and sent back via header x-partner-token / Authorization: Bearer
  token         String    @unique
  // Session valid for 30 days
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  revokedAt     DateTime?

  partner       Partner   @relation(fields: [partnerId], references: [id])

  @@index([partnerId])
  @@index([expiresAt])
}

// === Property Profile persisted per partner (1:1) ===
model PropertyProfile {
  id           Int       @id @default(autoincrement())
  partnerId    Int       @unique
  name         String
  addressLine  String?
  city         String?
  country      String?
  contactEmail String?
  phone        String?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  partner      Partner   @relation(fields: [partnerId], references: [id])
}

// === NEW: Photos ===
model PropertyPhoto {
  id         Int      @id @default(autoincrement())
  partnerId  Int
  key        String   @unique  // S3 object key
  url        String   // public (or CDN) URL
  alt        String?
  sortOrder  Int      @default(0)
  isCover    Boolean  @default(false)
  width      Int?
  height     Int?
  createdAt  DateTime @default(now())

  partner    Partner  @relation(fields: [partnerId], references: [id])

  @@index([partnerId, sortOrder])
}
